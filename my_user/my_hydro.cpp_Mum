//////////////////////////////////////////////////////////////////////////////
// This file was originally written by Bradley S. Meyer.
//
// This is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This software is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//! \file
//! \brief Example code for simple hydrodynamics.
////////////////////////////////////////////////////////////////////////////////

#include "my_hydro.h"

/**
 * @brief A namespace for user-defined rate functions.
 */
namespace my_user
{

//##############################################################################
// Code for exponential expansion: rho(t) = rho_0 * exp(-t/tau) plus wind-like
// tail.
//##############################################################################

//##############################################################################
// get_nucnet().  This routine returns a pointer to a Libnucnet structure.
// You will need to modify it according to your desired command line input.
//##############################################################################

Libnucnet *
get_nucnet( int argc, char **argv )
{

  Libnucnet * p_nucnet;

  //============================================================================
  // Check input.
  //============================================================================

  if( argc == 2 && strcmp( argv[1], "--help" ) == 0 )
  {
    std::cout << std::endl;
    std::cout << argv[0] <<
      " runs a single-zone network calculation for matter expanding" <<
      " exponentially." << std::endl << std::endl;
    std::cout << "For a usage statement, type " << std::endl << std::endl;
    std::cout << argv[0] << " --usage" << std::endl << std::endl;
    std::cout << "For an example usage, type " << std::endl << std::endl;
    std::cout << argv[0] << " --example" << std::endl << std::endl;
    exit( EXIT_FAILURE );
  }

  if( argc == 2 && strcmp( argv[1], "--example" ) == 0 )
  {
    std::cout << std::endl;
    std::cout << argv[0] << " ../../data_pub/my_net.xml " <<
      "../../data_pub/zone.xml my_output.xml \"[z <= 20]\"" <<
      std::endl << std::endl;
    exit( EXIT_FAILURE );
  }

  if( argc < 4 || argc > 6 || strcmp( argv[1], "--usage" ) == 0 )
  {
    fprintf(
      stderr,
      "\nUsage: %s net_file zone_file out_file xpath_nuc xpath_reac\n\n",
      argv[0]
    );
    fprintf(
      stderr, "  net_file = input network data xml filename\n\n"
    );
    fprintf(
      stderr, "  zone_file = input single zone data xml filename\n\n"
    );
    fprintf(
      stderr, "  out_file = output data xml filename\n\n"
    );
    fprintf(
      stderr,
      "  xpath_nuc = nuclear xpath expression (optional--required if xpath_reac specified)\n\n"
    );
    fprintf(
      stderr, "  xpath_reac = reaction xpath expression (optional)\n\n"
    );
    exit( EXIT_FAILURE );
  }

  //============================================================================
  // Validate input net file.
  //============================================================================

  if( strcmp( VALIDATE, "yes" ) == 0 )
  {
    if( !Libnucnet__Net__is_valid_input_xml( argv[1] ) ) {
      fprintf( stderr, "Not valid libnucnet net input!\n" );
      exit( EXIT_FAILURE );
    }
  }

  //============================================================================
  // Validate input zone file.
  //============================================================================

  if( strcmp( VALIDATE, "yes" ) == 0 )
  {
    if( !Libnucnet__is_valid_zone_data_xml( argv[2] ) ) {
      fprintf( stderr, "Not valid libnucnet zone data input!\n" );
      exit( EXIT_FAILURE );
    }
  }

  //============================================================================
  // Read and store input.
  //============================================================================

  p_nucnet = Libnucnet__new();

  if( argc == 4 )
  {
    Libnucnet__Net__updateFromXml(
      Libnucnet__getNet( p_nucnet ),
      argv[1],
      NULL,
      NULL
    );
  }
  else if( argc == 5 )
  {
    Libnucnet__Net__updateFromXml(
      Libnucnet__getNet( p_nucnet ),
      argv[1],
      argv[4],
      NULL
    );
  }
  else
  {
    Libnucnet__Net__updateFromXml(
      Libnucnet__getNet( p_nucnet ),
      argv[1],
      argv[4],
      argv[5]
    );
  }

  Libnucnet__assignZoneDataFromXml( p_nucnet, argv[2], NULL );

  return p_nucnet;

}

//##############################################################################
// initialize_zone(). In general, you shouldn't need to modify this routine.
//##############################################################################

void
initialize_zone( nnt::Zone& zone, char ** argv )
{

  //============================================================================
  // Set output file.
  //============================================================================

  Libnucnet__Zone__updateProperty(
    zone.getNucnetZone(),
    S_OUTPUT_FILE,
    NULL,
    NULL,
    argv[3]
  );

  //============================================================================
  // Set the initial evolution conditions.
  //============================================================================

  if( !zone.hasProperty( nnt::s_TIME ) )
  {
    zone.updateProperty( nnt::s_TIME, "0." );
  }

  update_zone_properties( zone );

}

//##############################################################################
// update_zone_properties().  This example treats the time dependence of the
// density as
//
// rho(t) = rho_0 * exp(-t/tau_0) + rho_1 / (1 + (t/tau_1))^2
//
// and of t9 as
//
// t9(t) = t9_0 * (rho(t)/rho(0))^(1/3)
//
// Modify this example according to your needs.
//##############################################################################

void
update_zone_properties( nnt::Zone& zone )
{

  double d_t, d_tau_0 = 0, d_tau_1 = 0;

  //============================================================================
  // Get the time.
  //============================================================================

  d_t = boost::lexical_cast<double>( zone.getProperty( nnt::s_TIME ) );

  //============================================================================
  // Get the trajectory parameters.
  //============================================================================

  try
  {
    d_tau_0 = boost::lexical_cast<double>( zone.getProperty( "tau_0" ) );
  }
  catch( const boost::bad_lexical_cast& e )
  {
    if( zone.getProperty( "tau_0" ) == "inf" )
    {
      return;
    }
    else
    {
      std::cerr << "Invalid tau_0." << std::endl;
    }
  }

  try
  {
    d_tau_1 = boost::lexical_cast<double>( zone.getProperty( "tau_1" ) );
  }
  catch( const boost::bad_lexical_cast& e )
  {
    if( zone.getProperty( "tau_1" ) == "inf" )
    {
      return;
    }
    else
    {
      std::cerr << "Invalid tau_1." << std::endl;
    }
  }

  //============================================================================
  // Compute density.
  //============================================================================

  double d_rho =
    boost::lexical_cast<double>(
      zone.getProperty( nnt::s_RHO_0 ) 
    ) * exp( -d_t / d_tau_0 )
    +
    boost::lexical_cast<double>(
      zone.getProperty( "rho_1" )
    ) / 
    gsl_pow_2( 1. + d_t / d_tau_1 );

  zone.updateProperty(
    nnt::s_RHO,
    boost::lexical_cast<std::string>( d_rho )
  );

  //============================================================================
  // Compute t9.
  //============================================================================

  double d_t9 = 
    boost::lexical_cast<double>( zone.getProperty( nnt::s_T9_0 ) ) *
    pow(
      d_rho /
      (
        boost::lexical_cast<double>( zone.getProperty( nnt::s_RHO_0 ) ) +
        boost::lexical_cast<double>( zone.getProperty( "rho_1" ) )
      ),
      1. / 3.
    );

  zone.updateProperty(
    nnt::s_T9,
    boost::lexical_cast<std::string>( d_t9 )
  );

  //============================================================================
  // Handle extremely low temperature and density.
  //============================================================================

  if(
    boost::lexical_cast<double>( zone.getProperty( nnt::s_T9 ) ) < 1.e-10
  )
    zone.updateProperty(
      nnt::s_T9,
      boost::lexical_cast<std::string>( 1.e-10 )
    );

  if(
    boost::lexical_cast<double>( zone.getProperty( nnt::s_RHO ) ) < 1.e-30
  )
    zone.updateProperty(
      nnt::s_RHO,
      boost::lexical_cast<std::string>( 1.e-30 )
    );

}

//##############################################################################
// set_zone().  This routine sets the single zone.  In general, you shouldn't
// need to modify this routine.
//##############################################################################

int
set_zone( Libnucnet * p_nucnet, nnt::Zone& zone, char ** argv )
{

  if( !argv )
  {
    std::cerr << "Invalid input." << std::endl;
    return 0;
  }

  if( !Libnucnet__getZoneByLabels( p_nucnet, "0", "0", "0" ) )
  {
    std::cerr << "Zone not found!" << std::endl;
    return 0;
  }

  zone.setNucnetZone(
    Libnucnet__getZoneByLabels( p_nucnet, "0", "0", "0" )
  );

  return 1;

}

} // namespace my_user

